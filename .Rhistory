# 4.2.1. Closeness centrality
df$clo <- 1/(dist_matrix_2002 %>% apply(1, sum))
# 4.2.2. Weighted closeness centrality
# However, for a settlement the position in relation to all the other vertices may not so
# important, as the position to the main (largest) ones. Let's calculate centrality measures
# in accordance to the size of settlements. In order to take the size into account, we
# multiply distance matrix to normalized population of the destination nodes
# Create matrix of population sizes in 2002
pop_2002_matrix <- rep.row(normalize(settlements_2002$Census2002),
nrow(dist_matrix_2002))
# Calculate distance matrices, weighted by population (_w)
dist_matrix_2002_w <- dist_matrix_2002 * pop_2002_matrix
# Calculate centrality closeness, weightened by population
df$clo_w <- 1/(dist_matrix_2002_w %>% apply(1, sum))
# How relate 'pure' closeness centrality to the weighted one?
df %>%
ggplot(aes(x = clo, y = clo_w, col= as.factor(clust_6)))+
geom_point()
# ====================================================
# 4.3. Closeness Centrality (in a scope of 6 clusters)
# 4.3.1. Closeness centrality
df$clo_CL6 <- NA_real_
# Calculate
for (i in 1:nrow(clusters_6_metrics)) {
# Define logical vector to subset settlements by the cluster
select_condition <- clust_6_2002 == i
# Subset distance matrix
temp_matrix <- dist_matrix_2002[select_condition, select_condition]
# Calculate edge_density
df[df$clust_6 == i,]$clo_CL6 <- 1/(temp_matrix %>% apply(1, sum))
}
# 4.3.1. Weighted closeness centrality
df$clo_CL6_w <- NA_real_
# Calculate
for (i in 1:nrow(clusters_6_metrics)) {
# Define logical vector to subset settlements by the cluster
select_condition <- clust_6_2002 == i
# Subset distance matrix
temp_matrix <- dist_matrix_2002[select_condition, select_condition]
# Create matrix of population sizes in 2002
temp_pop_matrix <- rep.row(normalize(settlements_2002[select_condition,]$Census2002),
nrow(temp_matrix))
# Calculate distance matrices, weighted by population (_w)
temp_matrix_w <- temp_matrix * temp_pop_matrix
# Calculate edge_density
df[df$clust_6 == i,]$clo_CL6_w <- 1/(temp_matrix_w %>% apply(1, sum, na.rm = T))
}
# ====================================================
# 4.4. Closeness Centrality (in a scope of 18 clusters)
# 4.4.1. Closeness centrality
df$clo_CL18 <- NA_real_
# Calculate
for (i in 1:nrow(clusters_18_metrics)) {
# Define logical vector to subset settlements by the cluster
select_condition <- clust_18_2002 == i
# Subset distance matrix
temp_matrix <- dist_matrix_2002[select_condition, select_condition]
# Calculate edge_density
df[df$clust_18 == i,]$clo_CL18 <- 1/(temp_matrix %>% apply(1, sum))
}
# 4.4.1. Weighted closeness centrality
df$clo_CL18_w <- NA_real_
# Calculate
for (i in 1:nrow(clusters_18_metrics)) {
# Define logical vector to subset settlements by the cluster
select_condition <- clust_18_2002 == i
# Subset distance matrix
temp_matrix <- dist_matrix_2002[select_condition, select_condition]
# Create matrix of population sizes in 2002
temp_pop_matrix <- rep.row(normalize(settlements_2002[select_condition,]$Census2002),
nrow(temp_matrix))
# Calculate distance matrices, weighted by population (_w)
temp_matrix_w <- temp_matrix * temp_pop_matrix
# Calculate edge_density
df[df$clust_18 == i,]$clo_CL18_w <- 1/(temp_matrix_w %>% apply(1, sum, na.rm = T))
}
# ===========================
# 4.5. Betweenness Centrality
# Чтобы выделить населенные пункты, связывающие кластеры между собой,
# мы рассчитали центральность по посредничеству
# с ограничением максимальной длины пути, учитываемой в вычислениях.
# Первоначально идея была ограничить путь средним диаметром кластеров. Диаметр в
# сетевом анализе - это расстояние между двумя самыми удаленными точками графа.
# Однако оказалось, что это слишком большие величины. Средний диаметр 6 кластеров -
# 385522.3. Вetweenness Centrality на его основе на 0.97 коррелирует
# с обычной центральностью по всему графу. Средний диаметр по 18 кластерам - 194501.3 -
# тоже достаточно большой. В итоге, в качестве ограничения мы взяли медианный путь внутри
# кластеров (52021.79 м)
# 4.5.1. Calculate median path
# 6 clusters
clusters_6_metrics$CL6_median_path <- NA_real_
# Calculate
for (i in 1:nrow(clusters_6_metrics)) {
# Define logical vector to subset settlements by the cluster
select_condition <- clust_6_2002 == i
# Subset distance matrix
temp_matrix <- dist_matrix_2002[select_condition, select_condition]
# Calculate edge_density
clusters_6_metrics[clusters_6_metrics$clust_6 == i,]$CL6_median_path <- median(temp_matrix)
}
# 18 clusters
clusters_18_metrics$CL18_median_path <- NA_real_
# Calculate
for (i in 1:nrow(clusters_18_metrics)) {
# Define logical vector to subset settlements by the cluster
select_condition <- clust_18_2002 == i
# Subset distance matrix
temp_matrix <- dist_matrix_2002[select_condition, select_condition]
# Calculate edge_density
clusters_18_metrics[clusters_18_metrics$clust_18 == i,]$CL18_median_path <- median(temp_matrix)
}
# 4.5.2. Betweenness centrality (limited by clusters median path)
df$betw_CL6 <- estimate_betweenness(graph = res_graph_2002,
vids = settl_index_2002,
cutoff = median(clusters_6_metrics$CL6_median_path))
df$betw_CL18 <- estimate_betweenness(graph = res_graph_2002,
vids = settl_index_2002,
cutoff = median(clusters_18_metrics$CL18_median_path))
# 4.5.3. Explore betweenness centrality
# Distribution of values
df %>%
ggplot(aes(x = betw_CL18))+
geom_density()
df %>%
ggplot(aes(x = betw_CL6))+
geom_density()
# Distributions are similiar. Let's compare the values?
df %>%
ggplot(aes(x = betw_CL18, y = betw_CL6))+
geom_point()
cor(df$betw_CL18, df$betw_CL6) # 0.86 - the values are highly correlated.
# Conclusion: may be, it makes sence to use in the model just one of the variables
# Betweenness Centrality vs Population Dynamics
df %>%
filter(pop2010to2002_rel < 200) %>%
ggplot(aes(x = betw_CL6, y = pop2010to2002_rel))+
geom_point(aes(col = betw_CL6), alpha = 0.4)+
geom_smooth(method = "glm")+
scale_colour_gradientn(colours = viridis(7), trans = "sqrt")
?left_join
df %>%
left_join(clusters_6_metrics, by = "clust_6") %>% View()
df %>%
left_join(clusters_6_metrics, by = "clust_6") %>%
left_join(clusters_18_metrics, by = "clust_18") %>% View()
df %>%
left_join(clusters_6_metrics, by = "clust_6") %>%
left_join(clusters_18_metrics %>% select(-clust_6), by = "clust_18") %>% View()
# Combine all the metrics into a single dataset
df %>%
left_join(clusters_6_metrics, by = "clust_6") %>%
left_join(clusters_18_metrics %>% select(-clust_6), by = "clust_18") -> df
# Save datasets into Rdatafile
save(df, clusters_6_metrics, clusters_18_metrics, file = "data/res_dataset.Rdata")
# Save datasets into Rdatafile
save(df, clusters_6_metrics, clusters_18_metrics, file = "data/Part3_res_dataset.Rdata")
load("~/Desktop/ДИССЕРТАЦИЯ/Settlements-Network-Population-Dynamics/data/Part3_res_dataset.Rdata")
View(clusters_6_metrics)
colnames(clusters_6_metrics)
colnames(clusters_18_metrics)
colnames(df)
View(df)
load(file = "data/Part3_res_dataset.Rdata")
View(clusters_6_metrics)
View(clusters_18_metrics)
library(dplyr)
library(ggplot2)
# Lad the data
load("data/settlements.Rdata")
rm(np)
rm(region)
load("~/Desktop/ДИССЕРТАЦИЯ/Settlements-Network-Population-Dynamics/data/settlements.Rdata")
load("~/Desktop/ДИССЕРТАЦИЯ/Settlements-Network-Population-Dynamics/data/Part1_output.RData")
rayons
rayons %>% str()
rayons %>% plot()
rayons@data
View(df)
load(file = "data/Part3_res_dataset.Rdata")
View(clusters_18_metrics)
df %>%
filter(clust_18 == 1) %>%
sd(Census2002)
df %>%
filter(clust_18 == 1) %>%
sd(Census2002)
df %>%
filter(clust_18 == 1) %>%
pull(Census2002) %>% sd()
# Территориальная дифференциация расселения
clusters_18_metrics %>%
select(CL18_variance_2002, CL18_variance_2010) %>%
gather(Year, Variance, CL18_variance_2002:CL18_variance_2010)
library(tidyr)
# Территориальная дифференциация расселения
clusters_18_metrics %>%
select(CL18_variance_2002, CL18_variance_2010) %>%
gather(Year, Variance, CL18_variance_2002:CL18_variance_2010)
# Территориальная дифференциация расселения
clusters_18_metrics %>%
select(clust_18, CL18_variance_2002, CL18_variance_2010) %>%
gather(Year, Variance, CL18_variance_2002:CL18_variance_2010)
library(stringr)
# Территориальная дифференциация расселения
clusters_18_metrics %>%
select(clust_18, CL18_variance_2002, CL18_variance_2010) %>%
gather(Year, Variance, CL18_variance_2002:CL18_variance_2010) %>%
mutate(Year = str_extract(Year, "\\d{4}"))
# Территориальная дифференциация расселения
clusters_18_metrics %>%
select(clust_18, CL18_variance_2002, CL18_variance_2010) %>%
gather(Year, Variance, CL18_variance_2002:CL18_variance_2010) %>%
mutate(Year = as.integer(str_extract(Year, "\\d{4}")))
# Территориальная дифференциация расселения
clusters_18_metrics %>%
select(clust_18, CL18_variance_2002, CL18_variance_2010) %>%
gather(Year, Variance, CL18_variance_2002:CL18_variance_2010) %>%
mutate(Year = as.integer(str_extract(Year, "\\d{4}"))) %>%
ggplot(aes(x = clust_18, y = Variance, col = Year))+
geom_col()
# Территориальная дифференциация расселения
clusters_18_metrics %>%
select(clust_18, CL18_variance_2002, CL18_variance_2010) %>%
gather(Year, Variance, CL18_variance_2002:CL18_variance_2010) %>%
mutate(Year = as.integer(str_extract(Year, "\\d{4}"))) %>%
ggplot(aes(x = clust_18, y = Variance, col = Year))+
geom_col(position = position_dodge())
# Территориальная дифференциация расселения
clusters_18_metrics %>%
select(clust_18, CL18_variance_2002, CL18_variance_2010) %>%
gather(Year, Variance, CL18_variance_2002:CL18_variance_2010) %>%
mutate(Year = as.integer(str_extract(Year, "\\d{4}"))) %>%
ggplot(aes(x = clust_18, y = Variance, fill = as.factor(Year)))+
geom_col(position = position_dodge())
# Территориальная дифференциация расселения
clusters_18_metrics %>%
select(clust_18, CL18_variance_2002, CL18_variance_2010) %>%
gather(Year, Variance, CL18_variance_2002:CL18_variance_2010) %>%
mutate(Year = as.integer(str_extract(Year, "\\d{4}"))) %>%
ggplot(aes(x = clust_18, y = Variance, fill = as.factor(Year)))+
geom_col(position = position_dodge())+
scale_x_continuous(breaks = 1:18)
load("data/settlements.Rdata")
region
library(sp)
library(sf)
ggplot()+
geom_sf(data = st_as_sf(region), fill = "white")+
geom_point(data = df, aes(x = lon, y = lat, col = CL18_variance_200))
ggplot()+
geom_sf(data = st_as_sf(region), fill = "white")+
geom_point(data = df, aes(x = lon, y = lat, col = CL18_variance_2002))
ggplot()+
geom_sf(data = st_as_sf(region), fill = "white")+
geom_point(data = df, aes(x = lon, y = lat, col = CL18_variance_2002))
ggplot()+
geom_sf(data = st_as_sf(region), fill = "white")+
geom_point(data = df, aes(x = lon, y = lat, col = CL18_variance_2002))+
scale_color_viridis_c()
ggplot()+
geom_sf(data = st_as_sf(region), fill = "white")+
geom_point(data = df, aes(x = lon, y = lat, col = CL18_variance_2010))+
scale_color_viridis_c()
?geom_contour
ggplot()+
geom_sf(data = st_as_sf(region), fill = "white")+
geom_point(data = df, aes(x = lon, y = lat, col = CL18_variance_2010))+
geom_contour(data = df, aes(x = lon, y = lat, z = CL18_variance_2010))
ggplot()+
geom_sf(data = st_as_sf(region), fill = "white")+
geom_point(data = df, aes(x = lon, y = lat, col = CL18_variance_2010))+
geom_contour(data = df, aes(x = lon, y = lat, z = CL18_variance_2010))+
scale_color_viridis_c()
ggplot()+
geom_sf(data = st_as_sf(region), fill = "white")+
geom_point(data = df, aes(x = lon, y = lat, col = CL18_variance_2010))+
geom_contour(data = df, aes(x = lon, y = lat, z = CL18_variance_2010))+
scale_color_viridis_c()
ggplot()+
geom_sf(data = st_as_sf(region), fill = "white")+
# geom_point(data = df, aes(x = lon, y = lat, col = CL18_variance_2010))+
geom_raster(data = df, aes(x = lon, y = lat, z = CL18_variance_2010))+
scale_color_viridis_c()
ggplot()+
geom_sf(data = st_as_sf(region), fill = "white")+
# geom_point(data = df, aes(x = lon, y = lat, col = CL18_variance_2010))+
geom_raster(data = df, aes(x = lon, y = lat, fill = CL18_variance_2010))+
scale_color_viridis_c()
# Как изменилась территориальная дифференциация расселения с 2002 по 2010 гг.?
clusters_18_metrics %>%
select(clust_18, CL18_variance_2002, CL18_variance_2010) %>%
gather(Year, Variance, CL18_variance_2002:CL18_variance_2010) %>%
mutate(Year = as.integer(str_extract(Year, "\\d{4}"))) %>%
ggplot(aes(x = clust_18, y = Variance, fill = as.factor(Year)))+
geom_col(position = position_dodge())+
scale_x_continuous(breaks = 1:18)
# Существуют ли пространственные закономерности в распределении показателя вариации?
ggplot()+
geom_sf(data = st_as_sf(region), fill = "white")+
geom_point(data = df, aes(x = lon, y = lat, col = CL18_variance_2010))+
# geom_raster(data = df, aes(x = lon, y = lat, fill = CL18_variance_2010))+
scale_color_viridis_c()
# Существуют ли пространственные закономерности в распределении показателя вариации?
ggplot()+
geom_sf(data = st_as_sf(region), fill = "white")+
geom_point(data = df, aes(x = lon, y = lat, col = CL18_variance_2010))+
# geom_raster(data = df, aes(x = lon, y = lat, fill = CL18_variance_2010))+
scale_color_viridis_c()
# Существуют ли пространственные закономерности в изменении показателя вариации?
ggplot()+
geom_sf(data = st_as_sf(region), fill = "white")+
geom_point(data = df, aes(x = lon, y = lat, col = CL18_variance_dif))+
# geom_raster(data = df, aes(x = lon, y = lat, fill = CL18_variance_2010))+
scale_color_viridis_c()
# Как сжатие расселения соотноистся с изменением численности населения?
ggplot()+
geom_sf(data = st_as_sf(region), fill = "white")+
geom_point(data = df, aes(x = lon, y = lat, col = CL18_pop2010to200_rel))+
# geom_raster(data = df, aes(x = lon, y = lat, fill = CL18_variance_2010))+
scale_color_viridis_c()
# Как сжатие расселения соотноистся с изменением численности населения?
ggplot()+
geom_sf(data = st_as_sf(region), fill = "white")+
geom_point(data = df, aes(x = lon, y = lat, col = CL18_pop2010to2002_rel))+
# geom_raster(data = df, aes(x = lon, y = lat, fill = CL18_variance_2010))+
scale_color_viridis_c()
ggplot()+
geom_sf(data = st_as_sf(region), fill = "white")+
geom_point(data = df, aes(x = lon, y = lat, col = pop2010to2002_rel))+
# geom_raster(data = df, aes(x = lon, y = lat, fill = CL18_variance_2010))+
scale_color_viridis_c()
ggplot()+
geom_sf(data = st_as_sf(region), fill = "white")+
geom_point(data = df, aes(x = lon, y = lat, col = pop2010to2002_rel))+
# geom_raster(data = df, aes(x = lon, y = lat, fill = CL18_variance_2010))+
scale_color_viridis_c()
# В целом, действует правило:
clusters_18_metrics %>%
ggplot(aes(x = CL18_pop2010to2002_rel, y = CL18_variance_dif))+
geom_point()
# Как сжатие расселения соотносится с изменением численности населения кластеров?
# Изменение численности населения формирует обратный сжатию расселения пространственный градиент
ggplot()+
geom_sf(data = st_as_sf(region), fill = "white")+
# geom_point(data = df, aes(x = lon, y = lat, col = CL18_pop2010to2002_rel))+
geom_raster(data = df, aes(x = lon, y = lat, fill = CL18_pop2010to2002_rel))+
scale_color_viridis_c()
# Как сжатие расселения соотносится с изменением численности населения кластеров?
# Изменение численности населения формирует обратный сжатию расселения пространственный градиент
ggplot()+
geom_sf(data = st_as_sf(region), fill = "white")+
# geom_point(data = df, aes(x = lon, y = lat, col = CL18_pop2010to2002_rel))+
geom_raster(data = df, aes(x = lon, y = lat, fill = CL18_pop2010to2002_rel))+
scale_color_viridis_c()
help("memory.size")
memory.limit(size = NA)
memory.size()
# Как сжатие расселения соотносится с изменением численности населения кластеров?
# Изменение численности населения формирует обратный сжатию расселения пространственный градиент
ggplot()+
# geom_sf(data = st_as_sf(region), fill = "white")+
# geom_point(data = df, aes(x = lon, y = lat, col = CL18_pop2010to2002_rel))+
geom_raster(data = df, aes(x = lon, y = lat, fill = CL18_pop2010to2002_rel))+
scale_color_viridis_c()
library(sp)
library(sf)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
load(file = "data/Part3_res_dataset.Rdata")
load("data/settlements.Rdata")
# Как сжатие расселения соотносится с изменением численности населения кластеров?
# Изменение численности населения формирует обратный сжатию расселения пространственный градиент
ggplot()+
geom_sf(data = st_as_sf(region), fill = "white")+
# geom_point(data = df, aes(x = lon, y = lat, col = CL18_pop2010to2002_rel))+
geom_raster(data = df, aes(x = lon, y = lat, fill = CL18_pop2010to2002_rel))+
scale_color_viridis_c()
knitr::opts_chunk$set(echo = TRUE)
library(sp)
library(sf)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
clusters_18_metrics %>%
ggplot(aes(x = CL18_pop2010to2002_rel, y = CL18_variance_dif))+
geom_point()
clusters_18_metrics %>%
ggplot(aes(x = CL18_pop2010to2002_rel, y = CL18_variance_dif))+
geom_point()+
geom_circle()
install.packages("ggforce")
library(ggforce)
clusters_18_metrics %>%
ggplot(aes(x = CL18_pop2010to2002_rel, y = CL18_variance_dif))+
geom_point()
?geom_circle
clusters_18_metrics %>%
ggplot(aes(x = CL18_pop2010to2002_rel, y = CL18_variance_dif))+
geom_point()+
geom_circle(data = data_frame(x = c(90, 75.5), y = c(112, 104)), aes(x0 = x, y0 = y), r = 10)
load(file = "data/Part3_res_dataset.Rdata")
clusters_18_metrics %>%
ggplot(aes(x = CL18_pop2010to2002_rel, y = CL18_variance_dif))+
geom_point()+
geom_circle(data = data_frame(x = c(90, 75.5), y = c(112, 104)),
mapping = aes(x0 = x, y0 = y), r = 10)
clusters_18_metrics %>%
ggplot(aes(x = CL18_pop2010to2002_rel, y = CL18_variance_dif))+
geom_point()
clusters_18_metrics %>%
ggplot(aes(x = CL18_pop2010to2002_rel, y = CL18_variance_dif))+
geom_point()+
geom_circle(data = data_frame(x = c(90, 75.5), y = c(112, 104)),
mapping = aes(x0 = x, y0 = y), r = 10, inherit.aes = F)
clusters_18_metrics %>%
ggplot(aes(x = CL18_pop2010to2002_rel, y = CL18_variance_dif))+
geom_point()+
geom_circle(data = data_frame(x = c(90, 75.5), y = c(112, 104)),
mapping = aes(x0 = x, y0 = y, r = 10), inherit.aes = F)
clusters_18_metrics %>%
ggplot(aes(x = CL18_pop2010to2002_rel, y = CL18_variance_dif))+
geom_point()+
geom_circle(data = data_frame(x = c(90, 75.5), y = c(112, 104)),
mapping = aes(x0 = x, y0 = y, r = 5),
inherit.aes = F)
clusters_18_metrics %>%
ggplot(aes(x = CL18_pop2010to2002_rel, y = CL18_variance_dif))+
geom_point()+
geom_circle(data = data_frame(x = c(90, 97.5), y = c(112, 104)),
mapping = aes(x0 = x, y0 = y, r = 5),
inherit.aes = F)
clusters_18_metrics %>%
ggplot(aes(x = CL18_pop2010to2002_rel, y = CL18_variance_dif))+
geom_point()+
geom_circle(data = data_frame(x = c(90, 97.5), y = c(112, 104)),
mapping = aes(x0 = x, y0 = y, r = 5,
linetype = "dotted", alpha = 0.5, color = "white"),
inherit.aes = F)
clusters_18_metrics %>%
ggplot(aes(x = CL18_pop2010to2002_rel, y = CL18_variance_dif))+
geom_point()+
geom_circle(data = data_frame(x = c(90, 97.5), y = c(112, 104)),
mapping = aes(x0 = x, y0 = y, r = 5,
linetype = "dotted", alpha = 0.5), color = "white",
inherit.aes = F)
clusters_18_metrics %>%
ggplot(aes(x = CL18_pop2010to2002_rel, y = CL18_variance_dif))+
geom_point()+
geom_circle(data = data_frame(x = c(90, 97.5), y = c(112, 104)),
mapping = aes(x0 = x, y0 = y, r = 5),
color = "white",linetype = "dotted",  alpha = 0.5,
inherit.aes = F)
clusters_18_metrics %>%
ggplot(aes(x = CL18_pop2010to2002_rel, y = CL18_variance_dif))+
geom_point()+
geom_circle(data = data_frame(x = c(90, 97.5), y = c(112, 104)),
mapping = aes(x0 = x, y0 = y, r = 5),
color = "white",linetype = "dotted",  alpha = 1,
inherit.aes = F)
clusters_18_metrics %>%
ggplot(aes(x = CL18_pop2010to2002_rel, y = CL18_variance_dif))+
geom_point()+
geom_circle(data = data_frame(x = c(90, 98), y = c(112, 104)),
mapping = aes(x0 = x, y0 = y, r = 5.5),
color = "grey50",linetype = "dotted",  alpha = 1,
inherit.aes = F)
clusters_18_metrics %>%
ggplot(aes(x = CL18_pop2010to2002_rel, y = CL18_variance_dif))+
geom_point()+
geom_circle(data = data_frame(x = c(90, 98), y = c(112, 104)),
mapping = aes(x0 = x, y0 = y, r = 5.5),
color = "grey70",linetype = "dotted",  alpha = 1,
inherit.aes = F)
clusters_18_metrics %>%
ggplot(aes(x = CL18_pop2010to2002_rel, y = CL18_variance_dif))+
geom_point()+
geom_circle(data = data_frame(x = c(90, 98), y = c(112, 104)),
mapping = aes(x0 = x, y0 = y, r = 5.5),
color = "grey70",linetype = "dotted",  alpha = 1,
inherit.aes = F)+
annotate("text", aes(x = 98, y = 108), label = "A")+
annotate("text", aes(x = 90, y = 115), label = "B")
clusters_18_metrics %>%
ggplot(aes(x = CL18_pop2010to2002_rel, y = CL18_variance_dif))+
geom_point()+
geom_circle(data = data_frame(x = c(90, 98), y = c(112, 104)),
mapping = aes(x0 = x, y0 = y, r = 5.5),
color = "grey70",linetype = "dotted",  alpha = 1,
inherit.aes = F)+
annotate("text", x = 98, y = 108, label = "A")+
annotate("text", x = 90, y = 115, label = "B")
clusters_18_metrics %>%
ggplot(aes(x = CL18_pop2010to2002_rel, y = CL18_variance_dif))+
geom_point()+
geom_circle(data = data_frame(x = c(90, 98), y = c(112, 104)),
mapping = aes(x0 = x, y0 = y, r = 5.5),
color = "grey70",linetype = "dotted",  alpha = 1,
inherit.aes = F)+
annotate("text", x = 99, y = 109, label = "A")+
annotate("text", x = 91, y = 116, label = "B")
clusters_18_metrics %>%
ggplot(aes(x = CL18_pop2010to2002_rel, y = CL18_variance_dif))+
geom_point()+
geom_circle(data = data_frame(x = c(90, 98), y = c(112, 104)),
mapping = aes(x0 = x, y0 = y, r = 5.5),
color = "grey70",linetype = "dotted",  alpha = 1,
inherit.aes = F)+
annotate("text", x = 99, y = 108.5, label = "A")+
annotate("text", x = 91, y = 116, label = "B")
